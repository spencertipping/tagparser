caterwaul.clone('std continuation seq parser')(function () {
  tagparser = text,
  where*[
    text(x)           = text(x),
    data_space(x)     = data_space(x),
    metadata_space(x) = metadata_space(x),
    not_special(x)    = not_special(x),

    whitespace        = peg[c(/\s+/, 1) >> fn[xs][xs[0]]],

    not_special       = l[bracketed_case = peg[c('[') % not_special % c(']') >> fn[xs]['[#{xs[1].text}]']],
                          text_case      = peg[c(/[^@\s\|\[\]]/, 1)[1] >> fn[xs][seq[~xs *[_[0]]].join('')]],
                          escaped_case   = peg[c(/\\(.)/, 2) >> fn[xs][xs[1]]]] in
                        peg[([whitespace] % (bracketed_case / text_case / escaped_case))[1] >> fn[xs][{text: seq[~xs *[_[1]]].join('')}]],

    label             = peg[c(/@(\w+)/, 2) >> fn[xs][{name: xs[1], data: false, metadata: false}]],
    tag               = peg[label % c('[') % data_space % [whitespace] % [c('|') % metadata_space] % c(']') >>
                            fn[xs][{name: xs[0].name, data: xs[2], metadata: xs[4] /re[_ && _[1]]}]],

    data_space        = text,
    metadata_space    = peg[([whitespace] % (tag / label) >> fn[xs][xs[1]])[0]],

    block             = peg[c('@[') % data_space % [whitespace] % [c('|') % metadata_space] % c(']') % data_space % [whitespace] % c('@[]') >>
                            fn[xs][{name: xs[1], metadata: xs[3] /re[_ && _[1]], data: xs[5] /re[xs[6] ? _.concat(xs[6]) : _]}]],

    text              = peg[([whitespace] % (tag / label / block / not_special))[0] >> fn[xs][seq[~xs *[_[1]]].slice()]]]})();
// Generated by SDoc 
